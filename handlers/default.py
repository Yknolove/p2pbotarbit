
from bot import dp
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.filters.state import StateFilter
import json
import os

# FSM states for interactive filter
class FilterStates(StatesGroup):
    waiting_for_choice = State()
    waiting_buy_max = State()
    waiting_sell_min = State()
    waiting_sell_max = State()
    waiting_volume_min = State()
    waiting_banks = State()
    waiting_exchanges = State()

# Utility: load/save filter
def filter_file_path(user_id: int) -> str:
    return os.path.join(os.getcwd(), f"filters_{user_id}.json")

def load_filter(user_id: int) -> dict:
    path = filter_file_path(user_id)
    if os.path.exists(path):
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        "buy_price_max": None,
        "sell_price_min": None,
        "sell_price_max": None,
        "volume_min": None,
        "banks": [],
        "exchanges": []
    }

def save_filter(user_id: int, data: dict):
    path = filter_file_path(user_id)
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def update_filter(user_id: int, **kwargs):
    data = load_filter(user_id)
    data.update(kwargs)
    save_filter(user_id, data)

async def toggle_filter_list_item(user_id: int, key: str, item: str):
    data = load_filter(user_id)
    items = data.get(key, [])
    if item in items:
        items.remove(item)
    else:
        items.append(item)
    data[key] = items
    save_filter(user_id, data)

# Main menu
@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", callback_data="start_arbitrage")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="filter_menu")],
        [InlineKeyboardButton(text="üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data="currency_rate")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton(text="üëë –ü–µ—Ä–µ–π—Ç–∏ –≤ PRO", callback_data="go_pro")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# Show filter menu
@dp.callback_query(lambda c: c.data == "filter_menu")
async def filter_menu(callback: CallbackQuery, state: FSMContext):
    current = load_filter(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"–ü–æ–∫—É–ø–∫–∞ –¥–æ ({current['buy_price_max']})", callback_data="set_buy_max")],
        [InlineKeyboardButton(f"–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç ({current['sell_price_min']})", callback_data="set_sell_min"),
         InlineKeyboardButton(f"–¥–æ ({current['sell_price_max']})", callback_data="set_sell_max")],
        [InlineKeyboardButton(f"–ú–∏–Ω. –æ–±—ä—ë–º ({current['volume_min']})", callback_data="set_volume_min")],
        [InlineKeyboardButton("–ë–∞–Ω–∫–∏‚Ä¶", callback_data="set_banks")],
        [InlineKeyboardButton("–ë–∏—Ä–∂–∏‚Ä¶", callback_data="set_exchanges")],
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="finish_filter")]
    ])
    await callback.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await state.set_state(FilterStates.waiting_for_choice)

# Change buy_max
@dp.callback_query(lambda c: c.data == "set_buy_max", StateFilter(FilterStates.waiting_for_choice))
async def ask_buy_max(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (—á–∏—Å–ª–æ):")
    await state.set_state(FilterStates.waiting_buy_max)

@dp.message(StateFilter(FilterStates.waiting_buy_max))
async def process_buy_max(message: Message, state: FSMContext):
    try:
        val = float(message.text.replace(',', '.'))
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 41.2")
    await update_filter(message.from_user.id, buy_price_max=val)
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–æ {val} –≥—Ä–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await filter_menu(message, state)

# Change sell_min
@dp.callback_query(lambda c: c.data == "set_sell_min", StateFilter(FilterStates.waiting_for_choice))
async def ask_sell_min(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ):")
    await state.set_state(FilterStates.waiting_sell_min)

@dp.message(StateFilter(FilterStates.waiting_sell_min))
async def process_sell_min(message: Message, state: FSMContext):
    try:
        val = float(message.text.replace(',', '.'))
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 42.5")
    await update_filter(message.from_user.id, sell_price_min=val)
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç {val} –≥—Ä–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await filter_menu(message, state)

# Change sell_max
@dp.callback_query(lambda c: c.data == "set_sell_max", StateFilter(FilterStates.waiting_for_choice))
async def ask_sell_max(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ):")
    await state.set_state(FilterStates.waiting_sell_max)

@dp.message(StateFilter(FilterStates.waiting_sell_max))
async def process_sell_max(message: Message, state: FSMContext):
    try:
        val = float(message.text.replace(',', '.'))
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 43.0")
    await update_filter(message.from_user.id, sell_price_max=val)
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –¥–æ {val} –≥—Ä–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await filter_menu(message, state)

# Change volume_min
@dp.callback_query(lambda c: c.data == "set_volume_min", StateFilter(FilterStates.waiting_for_choice))
async def ask_volume(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏ (USD):")
    await state.set_state(FilterStates.waiting_volume_min)

@dp.message(StateFilter(FilterStates.waiting_volume_min))
async def process_volume(message: Message, state: FSMContext):
    try:
        val = float(message.text.replace(',', '.'))
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 250")
    await update_filter(message.from_user.id, volume_min=val)
    await message.answer(f"‚úÖ –ú–∏–Ω. –æ–±—ä—ë–º {val} USD —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await filter_menu(message, state)

# Change banks
@dp.callback_query(lambda c: c.data == "set_banks", StateFilter(FilterStates.waiting_for_choice))
async def ask_banks(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("Monobank", callback_data="bank_Monobank")],
        [InlineKeyboardButton("Raiffeisen", callback_data="bank_Raiffeisen")],
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="banks_done")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è):", reply_markup=kb)
    await state.set_state(FilterStates.waiting_banks)

@dp.callback_query(lambda c: c.data.startswith("bank_"), StateFilter(FilterStates.waiting_banks))
async def toggle_bank(callback: CallbackQuery, state: FSMContext):
    bank = callback.data.split("_", 1)[1]
    await toggle_filter_list_item(callback.from_user.id, 'banks', bank)
    await ask_banks(callback, state)

@dp.callback_query(lambda c: c.data == "banks_done", StateFilter(FilterStates.waiting_banks))
async def banks_done(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úÖ –ë–∞–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await filter_menu(callback, state)

# Change exchanges
@dp.callback_query(lambda c: c.data == "set_exchanges", StateFilter(FilterStates.waiting_for_choice))
async def ask_exchanges(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("Bybit", callback_data="exch_Bybit")],
        [InlineKeyboardButton("Binance", callback_data="exch_Binance")],
        [InlineKeyboardButton("Bitget", callback_data="exch_Bitget")],
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="exch_done")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è):", reply_markup=kb)
    await state.set_state(FilterStates.waiting_exchanges)

@dp.callback_query(lambda c: c.data.startswith("exch_"), StateFilter(FilterStates.waiting_exchanges))
async def toggle_exchange(callback: CallbackQuery, state: FSMContext):
    exch = callback.data.split("_", 1)[1]
    await toggle_filter_list_item(callback.from_user.id, 'exchanges', exch)
    await ask_exchanges(callback, state)

@dp.callback_query(lambda c: c.data == "exch_done", StateFilter(FilterStates.waiting_exchanges))
async def exchanges_done(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úÖ –ë–∏—Ä–∂–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await filter_menu(callback, state)

# Finish filter
@dp.callback_query(lambda c: c.data == "finish_filter", StateFilter(FilterStates.waiting_for_choice))
async def finish_filter(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–§–∏–ª—å—Ç—Ä –æ–±–Ω–æ–≤–ª—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
    await state.clear()
    await cmd_start(callback.message)
